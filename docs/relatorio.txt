O objetivo deste trabalho era implementar um serviço de stream de dados no qual vários clientes podem se registrar no servidor para receber a comunicação, que será sobre UDP/IP. Como a escolha do tipo de dado era da dupla, escolhemos fazer um streaming de Gifs. Com isso, descobrimos que a plataforma Giphy (banco de dados e ferramenta de busca de gifs) possui uma API com SDK para Python, linguagem que foi escolhida pela equipe devido à sua comodidade, com diversas funções. 

A API do Giphy está sendo usada no arquivo giphy.py, que contém uma única função que decide entre os dois tipos de gifs existentes (como classificados pelo Giphy), gif "padrão" e sticker, usando uma função randomizadora e retorna esse tipo e a url do gif.
	Observações sobre a API: como estamos utilizando uma ferramenta de terceiros, podem existir pequenos problemas que são fora do escopo do trabalho:
		1- Para utilizar a API, é preciso requisitar uma chave. Como essa chave é apenas de teste, as vezes a quantidade de requisições é maior que a permitida. Esperar um pouco resolve esse problema
		2- É raro, mas pode acontecer de ter problema de banco de dados com o giphy. Nesse caso, ele mostra na tela o erro e tenta 3 vezes (a partir de um timeout interno) e caso nao consiga fazer a operação, é necessário rodar o programa de novo.
		3- As vezes, a obtenção da url dos gifs do tipo sticker retorna uma string vazia. Nesse caso, apenas imprimimos que a url veio vazia e não contabilizamos o sticker, mas não contamos o pacote como perdido, pois ele chegou exatamente como foi mandado

No arquivo gifStream.py é onde está a função principal do programa. Nela, é avaliado qual o tipo de maquina a se conectar (cliente ou servidor) e, no caso de ser o servidor, qual será o intervalo entre envio de mensagens. Usamos o endereço IP 255.255.255.255 pois assumimos que servidor e clientes estarão todos na mesma subrede. Depois de lidar com a linha de comando, a função main cria o socket, seta o broadcast e redireciona o programa para as funções client() em client.py ou server em server.py, de acordo com o lido na linha de comando.

A função server() em server.py é a função do servidor. Nela, há uma correspondencia sequencial de dados até que haja uma interrução CTRL+C do teclado. Quando essa interrupção acontece, finaliza o servidor e manda mensagem ao clientes para estes também finalizarem. Caso não seja lida uma interrupção, obtém informações que serão mandadas através da função gifUrl() em giphy.py, cria o pacote [numero de sequencia, url, tipo do gif] e manda.

Em client.py, há duas funções: handleExceptions(), que lida com o caso do cliente receber uma mensagem dizendo que o servidor fechou ou caso o cliente leia uma interrução CTRL+C do teclado. Caso uma dessas coisas aconteça, a função loga a quantidade de pacotes perdidos, a quantidade de pacotes fora de ordem, a quantidade de pacotes cujo tipo era sticker, a porcentagem de stickers em relação ao total e os stickers. Depois, encerra o programa. A função cliente() é o cliente em si. Ela fica recebendo dados por tempo infinito até que uma exceção ocorra. Após receber o dado, verifica seu número de sequencia para que possa contabilizar os perdidos e os fora de ordem, caso existam e também verifica se a url está vazia. Caso não esteja vazia, abre uma guia no navegador com a url recebida.

OPERAÇÃO: Quantidade de pacotes que são do tipo sticker e percentual de stickers em relação ao total